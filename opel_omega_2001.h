/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Tue Apr  9 16:24:34 2024.
 */

#ifndef OPEL_OMEGA_2001_H
#define OPEL_OMEGA_2001_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define OPEL_OMEGA_2001_TCU_DATA1_FRAME_ID (0x110u)
#define OPEL_OMEGA_2001_ESP_DATA1_FRAME_ID (0x120u)
#define OPEL_OMEGA_2001_SAS_DATA_FRAME_ID (0x180u)
#define OPEL_OMEGA_2001_ECU_DATA1_FRAME_ID (0x1a0u)
#define OPEL_OMEGA_2001_ECU_DATA2_FRAME_ID (0x1c0u)
#define OPEL_OMEGA_2001_ECU_DATA3_FRAME_ID (0x280u)
#define OPEL_OMEGA_2001_TCU_DATA2_FRAME_ID (0x2e0u)
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_FRAME_ID (0x300u)
#define OPEL_OMEGA_2001_ESP_DATA2_FRAME_ID (0x318u)
#define OPEL_OMEGA_2001_TCU_DATA3_FRAME_ID (0x3e0u)
#define OPEL_OMEGA_2001_ECU_DATA4_FRAME_ID (0x5c0u)

/* Frame lengths in bytes. */
#define OPEL_OMEGA_2001_TCU_DATA1_LENGTH (8u)
#define OPEL_OMEGA_2001_ESP_DATA1_LENGTH (8u)
#define OPEL_OMEGA_2001_SAS_DATA_LENGTH (8u)
#define OPEL_OMEGA_2001_ECU_DATA1_LENGTH (8u)
#define OPEL_OMEGA_2001_ECU_DATA2_LENGTH (8u)
#define OPEL_OMEGA_2001_ECU_DATA3_LENGTH (8u)
#define OPEL_OMEGA_2001_TCU_DATA2_LENGTH (8u)
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_LENGTH (8u)
#define OPEL_OMEGA_2001_ESP_DATA2_LENGTH (8u)
#define OPEL_OMEGA_2001_TCU_DATA3_LENGTH (8u)
#define OPEL_OMEGA_2001_ECU_DATA4_LENGTH (8u)

/* Extended or standard frame types. */
#define OPEL_OMEGA_2001_TCU_DATA1_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ESP_DATA1_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_SAS_DATA_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ECU_DATA1_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ECU_DATA2_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ECU_DATA3_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_TCU_DATA2_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ESP_DATA2_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_TCU_DATA3_IS_EXTENDED (0)
#define OPEL_OMEGA_2001_ECU_DATA4_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define OPEL_OMEGA_2001_TCU_DATA3_CURRENT_GEAR_1_CHOICE (5u)
#define OPEL_OMEGA_2001_TCU_DATA3_CURRENT_GEAR_2_CHOICE (6u)
#define OPEL_OMEGA_2001_TCU_DATA3_CURRENT_GEAR_3_CHOICE (7u)
#define OPEL_OMEGA_2001_TCU_DATA3_CURRENT_GEAR_4_CHOICE (8u)

#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_P_CHOICE (1u)
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_R_CHOICE (2u)
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_N_CHOICE (3u)
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_D_CHOICE (4u)
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_1_CHOICE (5u)
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_2_CHOICE (6u)
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_3_CHOICE (7u)

#define OPEL_OMEGA_2001_TCU_DATA3_TCC_STATE_OFF_CHOICE (0u)
#define OPEL_OMEGA_2001_TCU_DATA3_TCC_STATE_PARTIALLY__LOCKED_CHOICE (1u)
#define OPEL_OMEGA_2001_TCU_DATA3_TCC_STATE_LOCKED_CHOICE (2u)

/* Frame Names. */
#define OPEL_OMEGA_2001_TCU_DATA1_NAME "TCU_Data1"
#define OPEL_OMEGA_2001_ESP_DATA1_NAME "ESP_Data1"
#define OPEL_OMEGA_2001_SAS_DATA_NAME "SAS_Data"
#define OPEL_OMEGA_2001_ECU_DATA1_NAME "ECU_Data1"
#define OPEL_OMEGA_2001_ECU_DATA2_NAME "ECU_Data2"
#define OPEL_OMEGA_2001_ECU_DATA3_NAME "ECU_Data3"
#define OPEL_OMEGA_2001_TCU_DATA2_NAME "TCU_Data2"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_NAME "ABS_WheelSpeed"
#define OPEL_OMEGA_2001_ESP_DATA2_NAME "ESP_Data2"
#define OPEL_OMEGA_2001_TCU_DATA3_NAME "TCU_Data3"
#define OPEL_OMEGA_2001_ECU_DATA4_NAME "ECU_Data4"

/* Signal Names. */
#define OPEL_OMEGA_2001_TCU_DATA1_TORQUE_REQUEST1_NAME "TorqueRequest1"
#define OPEL_OMEGA_2001_TCU_DATA1_TORQUE_REQUEST2_NAME "TorqueRequest2"
#define OPEL_OMEGA_2001_TCU_DATA1_OUTPUT_SHAFT_SPEED_NAME "OutputShaftSpeed"
#define OPEL_OMEGA_2001_ESP_DATA1_ABD_ACTIVE_NAME "ABD_Active"
#define OPEL_OMEGA_2001_ESP_DATA1_TORQUE_REQUEST_FAST_NAME "TorqueRequestFast"
#define OPEL_OMEGA_2001_ESP_DATA1_TORQUE_REQUEST_SLOW_NAME "TorqueRequestSlow"
#define OPEL_OMEGA_2001_SAS_DATA_STEERING_ANGLE_NAME "SteeringAngle"
#define OPEL_OMEGA_2001_SAS_DATA_STEERING_SPEED_NAME "SteeringSpeed"
#define OPEL_OMEGA_2001_ECU_DATA1_RPM_NAME "RPM"
#define OPEL_OMEGA_2001_ECU_DATA1_TORQUE_RESPONSE_NAME "TorqueResponse"
#define OPEL_OMEGA_2001_ECU_DATA1_TORQUE_LOST_NAME "TorqueLost"
#define OPEL_OMEGA_2001_ECU_DATA1_APP_NAME "APP"
#define OPEL_OMEGA_2001_ECU_DATA1_TORQUE_REQUEST_NAME "TorqueRequest"
#define OPEL_OMEGA_2001_ECU_DATA2_TPS_NAME "TPS"
#define OPEL_OMEGA_2001_ECU_DATA3_CRUISE_ACTIVE_NAME "CruiseActive"
#define OPEL_OMEGA_2001_ECU_DATA3_KICKDOWN_ACTIVE_NAME "KickdownActive"
#define OPEL_OMEGA_2001_ECU_DATA3_BRAKE_ACTIVE_NAME "BrakeActive"
#define OPEL_OMEGA_2001_TCU_DATA2_TOT_NAME "TOT"
#define OPEL_OMEGA_2001_TCU_DATA2_INPUT_SHAFT_SPEED_NAME "InputShaftSpeed"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_FRONT_LEFT_WHEEL_ERROR_FLAG_NAME "FrontLeftWheelErrorFlag"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_FRONT_LEFT_WHEEL_SPEED_NAME "FrontLeftWheelSpeed"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_FRONT_RIGHT_WHEEL_ERROR_FLAG_NAME "FrontRightWheelErrorFlag"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_FRONT_RIGHT_WHEEL_SPEED_NAME "FrontRightWheelSpeed"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_REAR_LEFT_WHEEL_ERROR_FLAG_NAME "RearLeftWheelErrorFlag"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_REAR_LEFT_WHEEL_SPEED_NAME "RearLeftWheelSpeed"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_REAR_RIGHT_WHEEL_ERROR_FLAG_NAME "RearRightWheelErrorFlag"
#define OPEL_OMEGA_2001_ABS_WHEEL_SPEED_REAR_RIGHT_WHEEL_SPEED_NAME "RearRightWheelSpeed"
#define OPEL_OMEGA_2001_ESP_DATA2_ABS_ACTIVE_NAME "ABS_Active"
#define OPEL_OMEGA_2001_ESP_DATA2_ESP_ACTIVE_NAME "ESP_Active"
#define OPEL_OMEGA_2001_ESP_DATA2_ESP_OFF_NAME "ESP_Off"
#define OPEL_OMEGA_2001_TCU_DATA3_CURRENT_GEAR_NAME "CurrentGear"
#define OPEL_OMEGA_2001_TCU_DATA3_SELECTOR_POSITION_NAME "SelectorPosition"
#define OPEL_OMEGA_2001_TCU_DATA3_SPORT_MODE_ACTIVE_NAME "SportModeActive"
#define OPEL_OMEGA_2001_TCU_DATA3_WINTER_MODE_ACTIVE_NAME "WinterModeActive"
#define OPEL_OMEGA_2001_TCU_DATA3_AUTO_NEUTRAL_ACTIVE_NAME "AutoNeutralActive"
#define OPEL_OMEGA_2001_TCU_DATA3_TCC_STATE_NAME "TCC_State"
#define OPEL_OMEGA_2001_ECU_DATA4_ECT_NAME "ECT"
#define OPEL_OMEGA_2001_ECU_DATA4_IAT_NAME "IAT"

/**
 * Signals in message TCU_Data1.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_tcu_data1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_request1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_request2;

    /**
     * Range: 0..65535 (0..65535 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t output_shaft_speed;
};

/**
 * Signals in message ESP_Data1.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_esp_data1_t {
    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abd_active;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_request_fast;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_request_slow;
};

/**
 * Signals in message SAS_Data.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_sas_data_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 yes/no)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t steering_angle;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_speed;
};

/**
 * Signals in message ECU_Data1.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_ecu_data1_t {
    /**
     * Range: 0..65535 (0..65535 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rpm;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_response;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_lost;

    /**
     * Range: 0..102 (0..102 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t app;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_request;
};

/**
 * Signals in message ECU_Data2.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_ecu_data2_t {
    /**
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tps;
};

/**
 * Signals in message ECU_Data3.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_ecu_data3_t {
    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_active;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t kickdown_active;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_active;
};

/**
 * Signals in message TCU_Data2.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_tcu_data2_t {
    /**
     * Range: 0..255 (-40..215 -)
     * Scale: 1
     * Offset: -40
     */
    int8_t tot;

    /**
     * Range: 0..65535 (0..65535 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t input_shaft_speed;
};

/**
 * Signals in message ABS_WheelSpeed.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_abs_wheel_speed_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_left_wheel_error_flag;

    /**
     * Range: 0..2277 (0..255 km/h)
     * Scale: 0.112
     * Offset: 0
     */
    uint16_t front_left_wheel_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_right_wheel_error_flag;

    /**
     * Range: 0..2277 (0..255 km/h)
     * Scale: 0.112
     * Offset: 0
     */
    uint16_t front_right_wheel_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_left_wheel_error_flag;

    /**
     * Range: 0..2277 (0..255 km/h)
     * Scale: 0.112
     * Offset: 0
     */
    uint16_t rear_left_wheel_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_right_wheel_error_flag;

    /**
     * Range: 0..2277 (0..255 km/h)
     * Scale: 0.112
     * Offset: 0
     */
    uint16_t rear_right_wheel_speed;
};

/**
 * Signals in message ESP_Data2.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_esp_data2_t {
    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_active;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_active;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_off;
};

/**
 * Signals in message TCU_Data3.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_tcu_data3_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t current_gear;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t selector_position;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sport_mode_active;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t winter_mode_active;

    /**
     * Range: 0..1 (0..1 yes/no)
     * Scale: 1
     * Offset: 0
     */
    uint8_t auto_neutral_active;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcc_state;
};

/**
 * Signals in message ECU_Data4.
 *
 * All signal values are as on the CAN bus.
 */
struct opel_omega_2001_ecu_data4_t {
    /**
     * Range: 0..255 (-40..215 -)
     * Scale: 1
     * Offset: -40
     */
    int8_t ect;

    /**
     * Range: 0..255 (-40..215 -)
     * Scale: 1
     * Offset: -40
     */
    int8_t iat;
};

/**
 * Pack message TCU_Data1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_tcu_data1_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_tcu_data1_t *src_p,
    size_t size);

/**
 * Unpack message TCU_Data1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_tcu_data1_unpack(
    struct opel_omega_2001_tcu_data1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU_Data1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_tcu_data1_init(struct opel_omega_2001_tcu_data1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data1_torque_request1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data1_torque_request1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data1_torque_request1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data1_torque_request2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data1_torque_request2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data1_torque_request2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_tcu_data1_output_shaft_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data1_output_shaft_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data1_output_shaft_speed_is_in_range(uint16_t value);

/**
 * Pack message ESP_Data1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_esp_data1_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_esp_data1_t *src_p,
    size_t size);

/**
 * Unpack message ESP_Data1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_esp_data1_unpack(
    struct opel_omega_2001_esp_data1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESP_Data1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_esp_data1_init(struct opel_omega_2001_esp_data1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_esp_data1_abd_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_esp_data1_abd_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_esp_data1_abd_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_esp_data1_torque_request_fast_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_esp_data1_torque_request_fast_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_esp_data1_torque_request_fast_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_esp_data1_torque_request_slow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_esp_data1_torque_request_slow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_esp_data1_torque_request_slow_is_in_range(uint8_t value);

/**
 * Pack message SAS_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_sas_data_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_sas_data_t *src_p,
    size_t size);

/**
 * Unpack message SAS_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_sas_data_unpack(
    struct opel_omega_2001_sas_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SAS_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_sas_data_init(struct opel_omega_2001_sas_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t opel_omega_2001_sas_data_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_sas_data_steering_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_sas_data_steering_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_sas_data_steering_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_sas_data_steering_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_sas_data_steering_speed_is_in_range(uint8_t value);

/**
 * Pack message ECU_Data1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_ecu_data1_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_ecu_data1_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Data1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_ecu_data1_unpack(
    struct opel_omega_2001_ecu_data1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Data1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_ecu_data1_init(struct opel_omega_2001_ecu_data1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_ecu_data1_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data1_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data1_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data1_torque_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data1_torque_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data1_torque_response_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data1_torque_lost_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data1_torque_lost_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data1_torque_lost_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data1_app_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data1_app_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data1_app_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data1_torque_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data1_torque_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data1_torque_request_is_in_range(uint8_t value);

/**
 * Pack message ECU_Data2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_ecu_data2_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_ecu_data2_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Data2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_ecu_data2_unpack(
    struct opel_omega_2001_ecu_data2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Data2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_ecu_data2_init(struct opel_omega_2001_ecu_data2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data2_tps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data2_tps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data2_tps_is_in_range(uint8_t value);

/**
 * Pack message ECU_Data3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_ecu_data3_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_ecu_data3_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Data3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_ecu_data3_unpack(
    struct opel_omega_2001_ecu_data3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Data3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_ecu_data3_init(struct opel_omega_2001_ecu_data3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data3_cruise_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data3_cruise_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data3_cruise_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data3_kickdown_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data3_kickdown_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data3_kickdown_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_ecu_data3_brake_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data3_brake_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data3_brake_active_is_in_range(uint8_t value);

/**
 * Pack message TCU_Data2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_tcu_data2_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_tcu_data2_t *src_p,
    size_t size);

/**
 * Unpack message TCU_Data2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_tcu_data2_unpack(
    struct opel_omega_2001_tcu_data2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU_Data2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_tcu_data2_init(struct opel_omega_2001_tcu_data2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t opel_omega_2001_tcu_data2_tot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data2_tot_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data2_tot_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_tcu_data2_input_shaft_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data2_input_shaft_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data2_input_shaft_speed_is_in_range(uint16_t value);

/**
 * Pack message ABS_WheelSpeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_abs_wheel_speed_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_abs_wheel_speed_t *src_p,
    size_t size);

/**
 * Unpack message ABS_WheelSpeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_abs_wheel_speed_unpack(
    struct opel_omega_2001_abs_wheel_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABS_WheelSpeed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_abs_wheel_speed_init(struct opel_omega_2001_abs_wheel_speed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_abs_wheel_speed_front_left_wheel_error_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_front_left_wheel_error_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_front_left_wheel_error_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_abs_wheel_speed_front_left_wheel_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_front_left_wheel_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_front_left_wheel_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_abs_wheel_speed_front_right_wheel_error_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_front_right_wheel_error_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_front_right_wheel_error_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_abs_wheel_speed_front_right_wheel_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_front_right_wheel_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_front_right_wheel_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_abs_wheel_speed_rear_left_wheel_error_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_rear_left_wheel_error_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_rear_left_wheel_error_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_abs_wheel_speed_rear_left_wheel_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_rear_left_wheel_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_rear_left_wheel_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_abs_wheel_speed_rear_right_wheel_error_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_rear_right_wheel_error_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_rear_right_wheel_error_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t opel_omega_2001_abs_wheel_speed_rear_right_wheel_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_abs_wheel_speed_rear_right_wheel_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_abs_wheel_speed_rear_right_wheel_speed_is_in_range(uint16_t value);

/**
 * Pack message ESP_Data2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_esp_data2_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_esp_data2_t *src_p,
    size_t size);

/**
 * Unpack message ESP_Data2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_esp_data2_unpack(
    struct opel_omega_2001_esp_data2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESP_Data2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_esp_data2_init(struct opel_omega_2001_esp_data2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_esp_data2_abs_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_esp_data2_abs_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_esp_data2_abs_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_esp_data2_esp_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_esp_data2_esp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_esp_data2_esp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_esp_data2_esp_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_esp_data2_esp_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_esp_data2_esp_off_is_in_range(uint8_t value);

/**
 * Pack message TCU_Data3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_tcu_data3_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_tcu_data3_t *src_p,
    size_t size);

/**
 * Unpack message TCU_Data3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_tcu_data3_unpack(
    struct opel_omega_2001_tcu_data3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TCU_Data3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_tcu_data3_init(struct opel_omega_2001_tcu_data3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data3_current_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data3_current_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data3_current_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data3_selector_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data3_selector_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data3_selector_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data3_sport_mode_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data3_sport_mode_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data3_sport_mode_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data3_winter_mode_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data3_winter_mode_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data3_winter_mode_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data3_auto_neutral_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data3_auto_neutral_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data3_auto_neutral_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t opel_omega_2001_tcu_data3_tcc_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_tcu_data3_tcc_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_tcu_data3_tcc_state_is_in_range(uint8_t value);

/**
 * Pack message ECU_Data4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int opel_omega_2001_ecu_data4_pack(
    uint8_t *dst_p,
    const struct opel_omega_2001_ecu_data4_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Data4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int opel_omega_2001_ecu_data4_unpack(
    struct opel_omega_2001_ecu_data4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Data4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int opel_omega_2001_ecu_data4_init(struct opel_omega_2001_ecu_data4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t opel_omega_2001_ecu_data4_ect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data4_ect_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data4_ect_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t opel_omega_2001_ecu_data4_iat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double opel_omega_2001_ecu_data4_iat_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool opel_omega_2001_ecu_data4_iat_is_in_range(int8_t value);


#ifdef __cplusplus
}
#endif

#endif
